:ruby
  object_name = object.class.to_s.underscore.humanize.downcase
  controller_name = object.class.to_s.underscore.pluralize
  controller = "#{controller_name.camelize}Controller".constantize.new
  exclude = Array(exclude ||= (except ||= []))
  include = Array(include ||= [])
%span(class="actions")
  -include.each do |action|
    -if controller.respond_to?(action.to_sym) && permitted_to?(action.to_sym, object)
      !=link_to(action.to_s.humanize, { :controller=>controller_name, :action=>action.to_sym, :id=>object.id }, { :class=>action.to_s.parameterize, :title=>"#{action.to_s.humanize} #{object_name}" })
  -if controller.respond_to?(:show) && permitted_to?(:read, object) && !exclude.include?(:view)
    !=link_to('View', { :controller=>controller_name, :action=>:show, :id=>object.id }, { :class=>'view', :title=>"View #{object_name}" })
  -if object.is_a?(Sign)
    -if permitted_to?(:edit, object) && !exclude.include?(:sort)
      =link_to('Sort', sign_slots_path(object), { :class => 'sort', :title => "Sort #{object_name}" })
  -if controller.respond_to?(:edit) && permitted_to?(:edit, object) && !exclude.include?(:edit)
    !=link_to('Edit', { :controller=>controller_name, :action=>:edit, :id=>object.id }, { :class=>'edit', :title=>"Edit #{object_name}" })
  -if controller.respond_to?(:destroy) && permitted_to?(:delete, object) && !exclude.include?(:delete)
    !=link_to('Delete', object, { :confirm=>'Are you sure?', :class=>'delete', :title=>"Delete #{object_name}", :method=>:delete })
